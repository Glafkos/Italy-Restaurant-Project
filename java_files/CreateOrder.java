/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package databaseproject;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;


/**
 *
 * @author Glafkos Nikolaou
 */
public class CreateOrder extends javax.swing.JFrame {
    
    /**
     * Creates new form CreateOrder
     */
    public CreateOrder() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        welcome = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dishes = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        ingredients = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        drinks = new javax.swing.JTable();
        ingredients_button = new javax.swing.JButton();
        select_dish_btn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        welcome.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        dishes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Dishes"
            }
        ));
        dishes.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(dishes);

        ingredients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Add Ingredients"
            }
        ));
        jScrollPane2.setViewportView(ingredients);

        drinks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Drinks"
            }
        ));
        jScrollPane4.setViewportView(drinks);

        ingredients_button.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ingredients_button.setText("Show Ingredients");
        ingredients_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingredients_buttonActionPerformed(evt);
            }
        });

        select_dish_btn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        select_dish_btn.setText("Select Dish");
        select_dish_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                select_dish_btnActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("Select Ingredients");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton2.setText("Select Drinks");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Add Drinks");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Add Ingredients");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Select Dish");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(welcome, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(select_dish_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(96, 96, 96)
                            .addComponent(ingredients_button, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(74, 74, 74)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jScrollPane1)))
                .addContainerGap(294, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(welcome, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(select_dish_btn)
                    .addComponent(ingredients_button))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* SHOW INGREDIENTS BUTTON */
    private void ingredients_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingredients_buttonActionPerformed
    Connection conn = GUI.conn;
    int x = 0;
    int y = dishes.getSelectedRow();
    String s = (String) dishes.getValueAt(y, x);
    String name_of_dish = (String) dishes.getValueAt(y, 1);
   
    StringBuffer output = new StringBuffer() ; 

    try
    {
	String query = ("select name_of_ingredient from dishes_ingredients where id_of_dishes = "+s);
        Statement st = conn.createStatement();
        ResultSet rs = st.executeQuery(query);
        
        String name = null;
        output.append("Ingredients in: "+name_of_dish+ "\n\n");
        while(rs.next()) 
        {
            name = rs.getString("name_of_ingredient");
            output.append(" "+name+" \n") ;
        }
        JOptionPane.showMessageDialog(null, output.toString());	
    }
    catch (Exception ee) 
    {
        System.out.println("\nError\n");
	JOptionPane.showMessageDialog(null,ee);
    }		
    }//GEN-LAST:event_ingredients_buttonActionPerformed

    /* SELECT DISHES BUTTON*/
    private void select_dish_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_select_dish_btnActionPerformed
        int x = 1;
	int y = dishes.getSelectedRow();
	String s = (String) dishes.getValueAt(y, x);
	String id = (String) dishes.getValueAt(y,0);			
	String s1 = (String)dishes.getValueAt(y, 4);
	float bill = Float.parseFloat(s1);
        
	
	if (s.equals("pasta")) 
	{
            JOptionPane.showMessageDialog(null,"Please select pasta from ingredients table");
	}
        
	try
	{          
            int table_id = Servitoros.table_number;
            
            Connection conn = GUI.conn;
            String type = "dish";
                    
            Statement st = conn.createStatement();
            Statement st1 = conn.createStatement();
            
            String q2 = ("select name_of_ingredient,quantity from dishes_ingredients where id_of_dishes = "+id);
            ResultSet rs = st.executeQuery(q2);
        
            String name = null;
            int quantity = 0;
            int new_quantity = 0;
            int availability = 0;
            boolean bool = true;
            
            while(rs.next()) 
            {
                name = rs.getString("name_of_ingredient");
                quantity = rs.getInt("quantity");
                                 
                ResultSet rs1 = st1.executeQuery("Select quantity,availability_limit from ingredients where name_of_ingredient = '"+name+"'");
                       
                while(rs1.next()) 
                {
                    new_quantity = rs1.getInt("quantity")-quantity;
                    availability = rs1.getInt("availability_limit");
                }
                
                if (new_quantity > availability)
                {
                    String q3 = ("UPDATE ingredients SET quantity = '"+new_quantity+"' WHERE name_of_ingredient ='"+name+"'");
                    st1.executeUpdate(q3);
                }
                else
                {
                   bool = false;
                   JOptionPane.showMessageDialog(null,"No available "+name);
                }
            }
            
            if (bool)
            {
                String query = ("INSERT INTO bill (order_id,bill,item,`type`)" + "VALUES ("+"(SELECT order_id FROM orders WHERE table_number="+table_id+" AND orders.status= 'uncomplete'), "+bill+",'"+s+"','"+type+"')");
                st.executeUpdate(query);
                query = ("select * from ingredients");
                showData.show(conn, ingredients, query);  
           				
                JOptionPane.showMessageDialog(null,"Price: "+bill);
            }
            else
            {
                JOptionPane.showMessageDialog(null,"Select other dish please!");
            }      
	}
	catch (Exception ee)
	{
            JOptionPane.showMessageDialog(null,ee);
        }
    }//GEN-LAST:event_select_dish_btnActionPerformed

    /* SELECT INGREDIENTS BUTTON */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
   
        int y = ingredients.getSelectedRow();
	String s = (String) ingredients.getValueAt(y, 3);
	float bill = Float.parseFloat(s);
	int quantity = Integer.parseInt((String)ingredients.getValueAt(y, 1))-1;
        int availability = Integer.parseInt((String)ingredients.getValueAt(y, 2));
	String name_ingredients = (String) ingredients.getValueAt(y, 0);
        int dish_id = Integer.parseInt((String)dishes.getValueAt(dishes.getSelectedRow(),0));
				
	try
	{
            int table_id = Servitoros.table_number; 
            Connection conn = GUI.conn;
            Statement st = conn.createStatement();
            
            String type = "ingredients";          
            
            if (quantity > availability)
            {
                String q = ("INSERT INTO bill (order_id,bill,item,`type`)" + "VALUES ("+"(SELECT order_id FROM orders WHERE table_number="+table_id+" AND orders.status= 'uncomplete'), "+bill+",'"+name_ingredients+"','"+type+"')");
                st.executeUpdate(q);
                
                q = ("INSERT INTO add_ingredients (order_id,id_of_dish,name_of_ingredient)" + "VALUES ("+"(SELECT order_id FROM orders WHERE table_number="+table_id+" AND orders.status= 'uncomplete'), "+dish_id+",'"+name_ingredients+"')");
                st.executeUpdate(q);
                         
                JOptionPane.showMessageDialog(null,"Price: "+bill);

                String sql = "UPDATE ingredients SET quantity='"+quantity+"'where name_of_ingredient='"+name_ingredients+"'";
                st.executeUpdate(sql);
                
                String query = ("select * from ingredients");
                showData.show(conn, ingredients, query);
            }
            else
            {
                JOptionPane.showMessageDialog(null,"No available!");
            }
	}
	catch (Exception ee)
	{
            JOptionPane.showMessageDialog(null,ee);
	}										
    }//GEN-LAST:event_jButton1ActionPerformed

    /* SELECT DRINKS BUTTON */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int y = drinks.getSelectedRow();
	String s = (String) drinks.getValueAt(y, 3);
	float bill = Float.parseFloat(s);
	int quantity = Integer.parseInt((String)drinks.getValueAt(y, 1))-1;
        int availability = Integer.parseInt((String)drinks.getValueAt(y, 2));
	String drink_name = (String) drinks.getValueAt(y, 0);
				
	try
	{            
            int table_id = Servitoros.table_number;  
            Connection conn = GUI.conn;
            Statement st = conn.createStatement();
            
            String type = "drinks";
            
            if (quantity > availability)
            {
                st.executeUpdate("INSERT INTO bill (order_id,bill,item,type)" + "VALUES ("+"(SELECT order_id FROM orders WHERE table_number="+table_id+" AND orders.status= 'uncomplete'),"+bill+",'"+drink_name+"','"+type+"')");
                 
                String sql = "UPDATE drinks SET quantity='"+quantity+"'where name='"+drink_name+"'";
                st.executeUpdate(sql);
                String query = ("select * from drinks");
                showData.show(conn, drinks, query);
					
                JOptionPane.showMessageDialog(null,"Price: "+bill);
            }
            else
            {
                JOptionPane.showMessageDialog(null,"No available!");
            }
	}
	catch (Exception ee)
	{
            JOptionPane.showMessageDialog(null,ee);
	}	
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateOrder().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTable dishes;
    public static javax.swing.JTable drinks;
    public static javax.swing.JTable ingredients;
    private javax.swing.JButton ingredients_button;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton select_dish_btn;
    public static javax.swing.JLabel welcome;
    // End of variables declaration//GEN-END:variables
}
